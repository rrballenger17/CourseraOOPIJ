/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;


import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.function.Consumer;

import geography.GeographicPoint;
import util.GraphLoader;

/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which represents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
public class MapGraph {
	//TODO: Add your member variables here in WEEK 3
	
	// queue 
	// visited hashset
	// parent hashmap 
	// vertices hashset
	// hash map : point, out-bound edges

	Map<GeographicPoint, List<Edge>> graph = null;
	
	
	
	/** 
	 * Create a new empty MapGraph 
	 */
	public MapGraph()
	{
		
		graph = new HashMap<GeographicPoint, List<Edge>>();
		
		
		
		// TODO: Implement in this constructor in WEEK 3
	}
	
	/**
	 * Get the number of vertices (road intersections) in the graph
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices()
	{
		
		return graph.keySet().size();
		
		// TODO: Implement this method in WEEK 3
		// return 0;
	}
	
	/**
	 * Return the intersections, which are the vertices in this graph.
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices()
	{
		//TODO: Implement this method in WEEK 3
		return graph.keySet();
	}
	
	/**
	 * Get the number of road segments in the graph
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges()
	{
		Set<GeographicPoint> keys = graph.keySet();
		
		int size = 0;
		
		for(GeographicPoint k: keys){
			size += graph.get(k).size();
		}
		
		//TODO: Implement this method in WEEK 3
		return size;
	}

	
	
	/** Add a node corresponding to an intersection at a Geographic Point
	 * If the location is already in the graph or null, this method does 
	 * not change the graph.
	 * @param location  The location of the intersection
	 * @return true if a node was added, false if it was not (the node
	 * was already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location)
	{
		
		if( location == null ){
			return false;
		}
		
		
		if(graph.keySet().contains(location)){
			
			return false;
		}
		
		
		graph.put(location, new ArrayList<Edge>());
		
		
		// TODO: Implement this method in WEEK 3
		return true;
	}
	
	/**
	 * Adds a directed edge to the graph from pt1 to pt2.  
	 * Precondition: Both GeographicPoints have already been added to the graph
	 * @param from The starting point of the edge
	 * @param to The ending point of the edge
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 * @param length The length of the road, in km
	 * @throws IllegalArgumentException If the points have not already been
	 *   added as nodes to the graph, if any of the arguments is null,
	 *   or if the length is less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType, double length) throws IllegalArgumentException {

		
		if(length < 0 || from == null || to == null || roadName == null || roadType == null){
			throw new IllegalArgumentException();
		}
		
		if(graph.get(to) == null || graph.get(from) == null){
			throw new IllegalArgumentException();
		}
		
		
		Edge e = new Edge();
		
		e.source = from;
		
		e.destination = to;
		
		e.name = roadName;
		
		e.type = roadType;
		
		e.length = length;
		
		
		List<Edge> edges = graph.get(from);
		
		for(Edge edge : edges){
			if(edge.destination.equals(to)){
				return;
			}
		}
		
		edges.add(e);
		
		graph.put(from, edges);
		
		
		
		
		//TODO: Implement this method in WEEK 3
		
	}
	

	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return bfs(start, goal, temp);
	}
	
	private List<GeographicPoint> getChain(Map<GeographicPoint, GeographicPoint> parents, GeographicPoint start, GeographicPoint end){
		
		List<GeographicPoint> list = new ArrayList<GeographicPoint>();
		
		GeographicPoint curr = end;
		
		while(true){
			
			list.add(0, curr);
			
			if(curr.equals(start)){
				break;
			}
			
			
			curr = parents.get(curr);

			
			
		}
		
		
		
		
		return list;
		
	}
	
	
	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, 
			 					     GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		
		Set<GeographicPoint> visited = new HashSet<GeographicPoint>();
		
		Map<GeographicPoint, GeographicPoint> parents = new HashMap<GeographicPoint, GeographicPoint>();
		
		List<GeographicPoint> queue = new LinkedList();
		
		queue.add(start);
		
		nodeSearched.accept(start);

		
		
		while(true){
			
			if(queue.isEmpty()){
				break;
			}
			
			GeographicPoint current = queue.get(0);
			queue.remove(0);

			List<Edge> edges = graph.get(current);
		
			for(Edge e: edges ){
			
				GeographicPoint destination = e.destination;
			
				if(visited.contains(destination)){
					continue;
				}
				visited.add(destination);
		
				
				nodeSearched.accept(destination);

				parents.put(destination, current);
			
				if(destination.equals(goal)){
					return getChain(parents, start, goal);
				}
			
				queue.add(destination);
			
			}
		
		}
		
		// TODO: Implement this method in WEEK 3
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());

		return null;
	}
	

	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
        Consumer<GeographicPoint> temp = (x) -> {};
        return dijkstra(start, goal, temp);
	}
	

	
	
	

	// visited hashset
	private Set<GeographicPoint> visited;
	
	// parent hashmap 
	private Map<GeographicPoint, GeographicPoint> parents;
	
	private double distanceFromStart(GeographicPoint x){
		
		double dist = 0.0;
		
		GeographicPoint curr = x;
		
		while(true){
			
			GeographicPoint parent = parents.get(curr);
			
			if(parent == null){
				System.out.println("distance" + dist);
				return dist;
			}
			
			List<Edge> edges = graph.get(parent);

			for(int i=0; i<edges.size(); i++){
				
				Edge e = edges.get(i);
				
				if(e.destination.equals(curr)){
					
					dist += e.length; 
					break;
					
				}	
				
				if(i == edges.size() - 1){
					System.out.println("parent edge not found");
					dist += 1000000000;
				}
			}
			
			curr = parent;
			
		}
		
		
	}
	
	
	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, 
										  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		
		// priority queue
		PriorityQueue<GeographicPoint> queue = new PriorityQueue<GeographicPoint>(10, new Comparator<GeographicPoint>(){
			   @Override
			   public int compare(GeographicPoint x, GeographicPoint y) {

				   double result = distanceFromStart(y) - distanceFromStart(x);
				   
				   if(result > 0){
					   return 1;
				   }else if(result < 0){
					   return -1;
				   }else{
					   return 0;
				   }
			   }
		});
		
		// visited hashset 
		visited = new HashSet<GeographicPoint>();
		
		// parent hashmap
		parents = new HashMap<GeographicPoint, GeographicPoint>();
		
		
		double solutionLen = -1;
		

		// distances to infinity?
		
		// enqueue (start, 0) in priority queue
		queue.add(start);
		System.out.println("distance start: " + distanceFromStart(start));
		
		boolean found = false;
		
		
		while(!queue.isEmpty()){
			
			GeographicPoint curr = queue.poll();

			
			if(found){
				
				if(distanceFromStart(curr) > distanceFromStart(goal)){
					return getChain(parents, start, goal);
				}
				
				
			}
			
			
			if(!visited.contains(curr)){
				
				visited.add(curr);
				
			}
				
			if(curr.equals(goal)){
				
				System.out.println("FOUND PATH");
					
				
				found = true;
				continue;
					
			}
				
			
			List<Edge> eNeighs = graph.get(curr);
				
			for(Edge e: eNeighs){
				GeographicPoint neigh = e.destination;
					
				if(visited.contains(neigh)){
					
					double dist = distanceFromStart(neigh);
					
					double newDist = distanceFromStart(curr) + e.length;
					
					if(newDist < dist){
						parents.put(neigh, curr);
						queue.remove(neigh);
						queue.add(neigh);
					
					}	
				}else{
				
					parents.put(neigh, curr);
					queue.add(neigh);
				
				}
						
			}
				
				
				
				
		}
		
		
		if(found){
			return getChain(parents, start, goal);
		}
		
		System.out.println("no path found");
		

		
			
			
	
		// while PQ is not empty 
			// dequeue current
			// if curr is not visited
				// add curr to visited
				// if curr is goal return parent map
				// for each of curr's neighbors n not in visited set
	
					// if path through curr to n is shorter
			
						// update n's distance
		
						// update curr as n's parent in the parent map 
		
						// enqueue (n, distance) into the PQ
		
			
		
				// get here - no solution 
		
		
	
		
		return null;
	}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return aStarSearch(start, goal, temp);
	}
	
	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, 
											 GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		
		return null;
	}

	
	
	public static void main(String[] args)
	{
		System.out.print("Making a new map...");
		MapGraph firstMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", firstMap);
		System.out.println("DONE.");
		
		// You can use this method for testing.  
		
		
		/* Here are some test cases you should try before you attempt 
		 * the Week 3 End of Week Quiz, EVEN IF you score 100% on the 
		 * programming assignment.
		 */
		/*
		MapGraph simpleTestMap = new MapGraph();
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", simpleTestMap);
		
		GeographicPoint testStart = new GeographicPoint(1.0, 1.0);
		GeographicPoint testEnd = new GeographicPoint(8.0, -1.0);
		
		System.out.println("Test 1 using simpletest: Dijkstra should be 9 and AStar should be 5");
		List<GeographicPoint> testroute = simpleTestMap.dijkstra(testStart,testEnd);
		List<GeographicPoint> testroute2 = simpleTestMap.aStarSearch(testStart,testEnd);
		
		
		MapGraph testMap = new MapGraph();
		GraphLoader.loadRoadMap("data/maps/utc.map", testMap);
		
		// A very simple test using real data
		testStart = new GeographicPoint(32.869423, -117.220917);
		testEnd = new GeographicPoint(32.869255, -117.216927);
		System.out.println("Test 2 using utc: Dijkstra should be 13 and AStar should be 5");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		
		
		// A slightly more complex test using real data
		testStart = new GeographicPoint(32.8674388, -117.2190213);
		testEnd = new GeographicPoint(32.8697828, -117.2244506);
		System.out.println("Test 3 using utc: Dijkstra should be 37 and AStar should be 10");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		*/
		
		
		/* Use this code in Week 3 End of Week Quiz */
		/*MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");

		GeographicPoint start = new GeographicPoint(32.8648772, -117.2254046);
		GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
		
		
		List<GeographicPoint> route = theMap.dijkstra(start,end);
		List<GeographicPoint> route2 = theMap.aStarSearch(start,end);

		*/
		
	}
	
}
